---
# Source: airbyte/templates/gcs-log-creds-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-gcs-log-creds
  labels:
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: airbyte
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  gcp.json: ""
---
# Source: airbyte/charts/pod-sweeper/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-pod-sweeper-sweep-pod-script
  namespace: airbyte
  labels:
    helm.sh/chart: pod-sweeper-0.50.2
    app.kubernetes.io/name: pod-sweeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm

data:
  sweep-pod.sh: |
    #!/bin/bash
    get_job_pods () {
        kubectl -n ${KUBE_NAMESPACE} -L airbyte -l airbyte=job-pod \
          get pods \
          -o=jsonpath='{range .items[*]} {.metadata.name} {.status.phase} {.status.conditions[0].lastTransitionTime} {.status.startTime}{"\n"}{end}'
    }
    delete_pod() {
        printf "From status '%s' since '%s', " $2 $3
        echo "$1" | grep -v "STATUS" | awk '{print $1}' | xargs --no-run-if-empty kubectl -n ${KUBE_NAMESPACE} delete pod
    }
    while :
    do
        echo "Starting pod sweeper cycle:"
    
        if [ -n "${RUNNING_TTL_MINUTES}" ]; then 
          # Time window for running pods
          RUNNING_DATE_STR=`date -d "now - ${RUNNING_TTL_MINUTES} minutes" --utc -Ins`
          RUNNING_DATE=`date -d $RUNNING_DATE_STR +%s`
          echo "Will sweep running pods from before ${RUNNING_DATE_STR}"
        fi

        if [ -n "${SUCCEEDED_TTL_MINUTES}" ]; then 
          # Shorter time window for succeeded pods
          SUCCESS_DATE_STR=`date -d "now - ${SUCCEEDED_TTL_MINUTES} minutes" --utc -Ins`
          SUCCESS_DATE=`date -d $SUCCESS_DATE_STR +%s`
          echo "Will sweep succeeded pods from before ${SUCCESS_DATE_STR}"
        fi

        if [ -n "${UNSUCCESSFUL_TTL_MINUTES}" ]; then 
          # Longer time window for unsuccessful pods (to debug)
          NON_SUCCESS_DATE_STR=`date -d "now - ${UNSUCCESSFUL_TTL_MINUTES} minutes" --utc -Ins`
          NON_SUCCESS_DATE=`date -d $NON_SUCCESS_DATE_STR +%s`
          echo "Will sweep unsuccessful pods from before ${NON_SUCCESS_DATE_STR}"
        fi
        (
            IFS=$'\n'
            for POD in `get_job_pods`; do
                IFS=' '
                POD_NAME=`echo $POD | cut -d " " -f 1`
                POD_STATUS=`echo $POD | cut -d " " -f 2`
                POD_DATE_STR=`echo $POD | cut -d " " -f 3`
                POD_START_DATE_STR=`echo $POD | cut -d " " -f 4`
                POD_DATE=`date -d ${POD_DATE_STR:-$POD_START_DATE_STR} '+%s'`
                if [ -n "${RUNNING_TTL_MINUTES}" ] && [ "$POD_STATUS" = "Running" ]; then
                  if [ "$POD_DATE" -lt "$RUNNING_DATE" ]; then
                      delete_pod "$POD_NAME" "$POD_STATUS" "$POD_DATE_STR"
                  fi
                elif [ -n "${SUCCEEDED_TTL_MINUTES}" ] && [ "$POD_STATUS" = "Succeeded" ]; then
                  if [ "$POD_DATE" -lt "$SUCCESS_DATE" ]; then
                      delete_pod "$POD_NAME" "$POD_STATUS" "$POD_DATE_STR"
                  fi
                elif [ -n "${UNSUCCESSFUL_TTL_MINUTES}" ] && [ "$POD_STATUS" != "Running" ] && [ "$POD_STATUS" != "Succeeded" ]; then
                  if [ "$POD_DATE" -lt "$NON_SUCCESS_DATE" ]; then
                      delete_pod "$POD_NAME" "$POD_STATUS" "$POD_DATE_STR"
                  fi
                fi
            done
        )
        echo "Completed pod sweeper cycle.  Sleeping for 60 seconds..."
        sleep 60
    done
---
# Source: airbyte/charts/temporal/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-temporal-dynamicconfig
  labels:
    helm.sh/chart: temporal-0.50.2
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
data:
  "development.yaml": |
    # when modifying, remember to update the docker-compose version of this file in temporal/dynamicconfig/development.yaml
    frontend.enableClientVersionCheck:
      - value: true
        constraints: {}
    history.persistenceMaxQPS:
      - value: 3000
        constraints: {}
    frontend.persistenceMaxQPS:
      - value: 3000
        constraints: {}
    frontend.historyMgrNumConns:
      - value: 30
        constraints: {}
    frontend.throttledLogRPS:
      - value: 20
        constraints: {}
    history.historyMgrNumConns:
      - value: 50
        constraints: {}
    system.advancedVisibilityWritingMode:
      - value: "off"
        constraints: {}
    history.defaultActivityRetryPolicy:
      - value:
          InitialIntervalInSeconds: 1
          MaximumIntervalCoefficient: 100.0
          BackoffCoefficient: 2.0
          MaximumAttempts: 0
    history.defaultWorkflowRetryPolicy:
      - value:
          InitialIntervalInSeconds: 1
          MaximumIntervalCoefficient: 100.0
          BackoffCoefficient: 2.0
          MaximumAttempts: 0
    # Limit for responses. This mostly impacts discovery jobs since they have the largest responses.
    limit.blobSize.error:
      - value: 15728640 # 15MB
        constraints: {}
    limit.blobSize.warn:
      - value: 10485760 # 10MB
        constraints: {}
---
# Source: airbyte/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: airbyte-admin-role
rules:
  - apiGroups: ["*"]
    resources: ["jobs", "pods", "pods/log", "pods/exec", "pods/attach"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # over-permission for now
---
# Source: airbyte/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: airbyte-admin-binding
roleRef:
  apiGroup: ""
  kind: Role
  name: airbyte-admin-role
subjects:
  - kind: ServiceAccount
    name: airbyte-admin
---
# Source: airbyte/charts/airbyte-api-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-airbyte-api-server-svc
  labels:
    helm.sh/chart: airbyte-api-server-0.50.2
    app.kubernetes.io/name: airbyte-api-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: airbyte-api-server
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/charts/connector-builder-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-airbyte-connector-builder-server-svc
  labels:
    helm.sh/chart: connector-builder-server-0.50.2
    app.kubernetes.io/name: connector-builder-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: connector-builder-server
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/charts/server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-airbyte-server-svc
  labels:
    helm.sh/chart: server-0.50.2
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/charts/temporal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-temporal
  labels:
    helm.sh/chart: temporal-0.50.2
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 7233
    protocol: TCP
    targetPort: 7233
  selector:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/charts/webapp/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-airbyte-webapp-svc
  labels:
    helm.sh/chart: webapp-0.50.2
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/charts/airbyte-api-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-airbyte-api-server
  labels:
    helm.sh/chart: airbyte-api-server-0.50.2
    app.kubernetes.io/name: airbyte-api-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: airbyte-api-server
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: airbyte-api-server
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-api-server
        image: airbyte/airbyte-api-server:0.50.34
        imagePullPolicy: "IfNotPresent"
        env:
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: INTERNAL_API_HOST
        - name: AIRBYTE_API_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_API_HOST
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION

        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3

        ports:
        - name: http
          containerPort: 8006
          protocol: TCP
        resources:
          limits: {}
          requests: {}
        volumeMounts:
      volumes:
---
# Source: airbyte/charts/connector-builder-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-connector-builder-server
  labels:
    helm.sh/chart: connector-builder-server-0.50.2
    app.kubernetes.io/name: connector-builder-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: connector-builder-server
      app.kubernetes.io/instance: release-name
  strategy:
    type: 
  template:
    metadata:
      labels:
        app.kubernetes.io/name: connector-builder-server
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-connector-builder-server
        image: airbyte/connector-builder-server:0.50.34
        imagePullPolicy: "IfNotPresent"
        env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION

        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        livenessProbe:
          httpGet:
            path: /v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /v1/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3

        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
          limits: {}
          requests: {}
        volumeMounts:
      volumes:
---
# Source: airbyte/charts/cron/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-cron
  labels:
    helm.sh/chart: cron-0.50.2
    app.kubernetes.io/name: cron
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cron
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cron
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      automountServiceAccountToken: true
      containers:
        - name: airbyte-cron
          image: airbyte/cron:0.50.34
          imagePullPolicy: "IfNotPresent"
          env:
          - name: AIRBYTE_VERSION
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: AIRBYTE_VERSION
          - name: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: release-name-airbyte-secrets
                key: DATABASE_PASSWORD
          - name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: DATABASE_URL
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: release-name-airbyte-secrets
                key: DATABASE_USER
          - name: MICRONAUT_ENVIRONMENTS
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: CRON_MICRONAUT_ENVIRONMENTS
          - name: TEMPORAL_HOST
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: TEMPORAL_HOST
          - name: TRACKING_STRATEGY
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: TRACKING_STRATEGY
          - name: WORKFLOW_FAILURE_RESTART_DELAY_SECONDS
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: WORKFLOW_FAILURE_RESTART_DELAY_SECONDS
          - name: WORKLOAD_API_BEARER_TOKEN
            valueFrom:
              secretKeyRef:
                name: release-name-airbyte-secrets
                key: WORKLOAD_API_BEARER_TOKEN
          - name: WORKLOAD_API_HOST
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: WORKLOAD_API_HOST
          - name: WORKSPACE_DOCKER_MOUNT
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: WORKSPACE_DOCKER_MOUNT
          - name: WORKSPACE_ROOT
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: WORKSPACE_ROOT

          # Values from secret

          # Values from env

          # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
          resources:
            limits: {}
            requests: {}
---
# Source: airbyte/charts/pod-sweeper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pod-sweeper-pod-sweeper
  namespace: airbyte
  labels:
    helm.sh/chart: pod-sweeper-0.50.2
    app.kubernetes.io/name: pod-sweeper
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
    namespace: airbyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pod-sweeper
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pod-sweeper
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/sweep-pod-script: 24c1fdc0bcb84080e3233ade20270aaf53cde13f64c0c355838539f77384ada7
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-pod-sweeper
        image: bitnami/kubectl:latest
        imagePullPolicy: "IfNotPresent"
        env:
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RUNNING_TTL_MINUTES
          value: ""
        - name: SUCCEEDED_TTL_MINUTES
          value: "120"
        - name: UNSUCCESSFUL_TTL_MINUTES
          value: "1440"
        volumeMounts:
        - mountPath: /script/sweep-pod.sh
          subPath: sweep-pod.sh
          name: sweep-pod-script
        - mountPath: /.kube
          name: kube-config
        command: ["/bin/bash", "-c", /script/sweep-pod.sh]
        resources:
          limits: {}
          requests: {}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - grep -aq sweep-pod.sh /proc/1/cmdline
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - grep -aq sweep-pod.sh /proc/1/cmdline
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: kube-config
        emptyDir: {}
      - name: sweep-pod-script
        configMap:
          name: release-name-pod-sweeper-sweep-pod-script
          defaultMode: 0755
---
# Source: airbyte/charts/server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-server
  labels:
    helm.sh/chart: server-0.50.2
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: server
      app.kubernetes.io/instance: release-name
  strategy:
    type: Recreate # Needed due to volume claims
  template:
    metadata:
      labels:
        app.kubernetes.io/name: server
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-server-container
        image: airbyte/server:0.50.34
        imagePullPolicy: "IfNotPresent"
        env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION
        - name: AIRBYTE_EDITION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_EDITION
        - name: AUTO_DETECT_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AUTO_DETECT_SCHEMA
        - name: CONFIG_ROOT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: CONFIG_ROOT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_PASSWORD
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_USER
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: TRACKING_STRATEGY
        - name: WORKER_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKER_ENVIRONMENT
        - name: WORKSPACE_ROOT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKSPACE_ROOT
        - name: WEBAPP_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WEBAPP_URL
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: TEMPORAL_HOST
        - name: LOG_LEVEL
          value: "INFO"
        - name: JOB_MAIN_CONTAINER_CPU_REQUEST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_REQUEST
        - name: JOB_MAIN_CONTAINER_CPU_LIMIT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_LIMIT
        - name: JOB_MAIN_CONTAINER_MEMORY_REQUEST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_REQUEST
        - name: JOB_MAIN_CONTAINER_MEMORY_LIMIT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_LIMIT
        - name: S3_LOG_BUCKET
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_LOG_BUCKET
        - name: S3_LOG_BUCKET_REGION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_LOG_BUCKET_REGION
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_ACCESS_KEY
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_SECRET_ACCESS_KEY
        - name: S3_MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_MINIO_ENDPOINT
        - name: STATE_STORAGE_MINIO_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: STATE_STORAGE_MINIO_BUCKET_NAME
        - name: STATE_STORAGE_MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_ACCESS_KEY
        - name: STATE_STORAGE_MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_SECRET_ACCESS_KEY
        - name: STATE_STORAGE_MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: STATE_STORAGE_MINIO_ENDPOINT
        - name: S3_PATH_STYLE_ACCESS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_PATH_STYLE_ACCESS
        - name: GOOGLE_APPLICATION_CREDENTIALS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: GOOGLE_APPLICATION_CREDENTIALS
        - name: GCS_LOG_BUCKET
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: GCS_LOG_BUCKET
        - name: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: WORKER_LOGS_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKER_LOGS_STORAGE_TYPE
        - name: WORKER_STATE_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKER_STATE_STORAGE_TYPE
        - name: KEYCLOAK_INTERNAL_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: KEYCLOAK_INTERNAL_HOST
        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: gcs-log-creds-volume
          mountPath: /secrets/gcs-log-creds
          readOnly: true
        - name: airbyte-yml-volume
          mountPath: /app/configs/airbyte.yml
          subPath: fileContents
      volumes:
      - name: gcs-log-creds-volume
        secret:
          secretName: release-name-gcs-log-creds
      - name: airbyte-yml-volume
        configMap:
          name: release-name-airbyte-yml
---
# Source: airbyte/charts/temporal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-temporal
  labels:
    helm.sh/chart: temporal-0.50.2
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: temporal
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: temporal
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-temporal
        image: temporalio/auto-setup:1.20.1
        imagePullPolicy: IfNotPresent
        env:
          - name: AUTO_SETUP
            value: "true"
          - name: DB # The DB engine to use
            value: "postgresql"
          - name: DB_PORT
            value: "5432"
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: release-name-airbyte-secrets
                key: DATABASE_USER
          - name: POSTGRES_PWD
            valueFrom:
              secretKeyRef:
                name: release-name-airbyte-secrets
                key: DATABASE_PASSWORD
          - name: POSTGRES_SEEDS
            valueFrom:
              configMapKeyRef:
                name: release-name-airbyte-env
                key: DATABASE_HOST
          - name: DYNAMIC_CONFIG_FILE_PATH
            value: "config/dynamicconfig/development.yaml"
        # Values from secret

        # Values from env
        ports:
        - containerPort: 7233
        volumeMounts:
        - name: airbyte-temporal-dynamicconfig
          mountPath: "/etc/temporal/config/dynamicconfig/"
        resources:
          limits: {}
          requests: {}
      volumes:
      - name: airbyte-temporal-dynamicconfig
        configMap:
          name: release-name-temporal-dynamicconfig
          items:
          - key: development.yaml
            path: development.yaml
---
# Source: airbyte/charts/webapp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-webapp
  labels:
    helm.sh/chart: webapp-0.50.2
    app.kubernetes.io/name: webapp
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: webapp
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webapp
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      containers:
      - name: airbyte-webapp-container
        image: airbyte/webapp:0.50.34
        imagePullPolicy: "IfNotPresent"
        env:
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: TRACKING_STRATEGY
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: INTERNAL_API_HOST
        - name: KEYCLOAK_INTERNAL_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: KEYCLOAK_INTERNAL_HOST
        - name: CONNECTOR_BUILDER_API_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: CONNECTOR_BUILDER_API_HOST
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: API_URL
        - name: CONNECTOR_BUILDER_API_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: CONNECTOR_BUILDER_API_URL
        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        livenessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /index.html
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
          limits: {}
          requests: {}
        volumeMounts:
      volumes:
---
# Source: airbyte/charts/worker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-worker
  labels:
    helm.sh/chart: worker-0.50.2
    app.kubernetes.io/name: worker
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "dev"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: worker
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: worker
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: airbyte-admin
      automountServiceAccountToken: true
      containers:
      - name: airbyte-worker-container
        image: airbyte/worker:dev
        imagePullPolicy: "IfNotPresent"
        env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION
        - name: CONFIG_ROOT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: CONFIG_ROOT
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_PORT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
                name: release-name-airbyte-secrets
                key: DATABASE_PASSWORD
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_USER
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: TRACKING_STRATEGY
        - name: WORKSPACE_DOCKER_MOUNT
          value: workspace
        - name: WORKSPACE_ROOT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKSPACE_ROOT
        - name: LOCAL_ROOT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: LOCAL_ROOT
        - name: WEBAPP_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WEBAPP_URL
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: TEMPORAL_HOST
        - name: TEMPORAL_WORKER_PORTS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: TEMPORAL_WORKER_PORTS
        - name: LOG_LEVEL
          value: "INFO"
        - name: JOB_KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: JOB_KUBE_SERVICEACCOUNT
          value: airbyte-admin
        - name: JOB_MAIN_CONTAINER_CPU_REQUEST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_REQUEST
        - name: JOB_MAIN_CONTAINER_CPU_LIMIT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_CPU_LIMIT
        - name: JOB_MAIN_CONTAINER_MEMORY_REQUEST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_REQUEST
        - name: JOB_MAIN_CONTAINER_MEMORY_LIMIT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOB_MAIN_CONTAINER_MEMORY_LIMIT
        - name: S3_LOG_BUCKET
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_LOG_BUCKET
        - name: S3_LOG_BUCKET_REGION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_LOG_BUCKET_REGION
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_ACCESS_KEY
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_SECRET_ACCESS_KEY
        - name: S3_MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_MINIO_ENDPOINT
        - name: S3_PATH_STYLE_ACCESS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: S3_PATH_STYLE_ACCESS
        - name: GOOGLE_APPLICATION_CREDENTIALS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: GOOGLE_APPLICATION_CREDENTIALS
        - name: GCS_LOG_BUCKET
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: GCS_LOG_BUCKET
        - name: STATE_STORAGE_MINIO_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: STATE_STORAGE_MINIO_BUCKET_NAME
        - name: STATE_STORAGE_MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_ACCESS_KEY
        - name: STATE_STORAGE_MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: STATE_STORAGE_MINIO_SECRET_ACCESS_KEY
        - name: STATE_STORAGE_MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: STATE_STORAGE_MINIO_ENDPOINT
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: INTERNAL_API_HOST
        - name: WORKLOAD_API_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKLOAD_API_HOST
        - name: WORKLOAD_API_BEARER_TOKEN
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: WORKLOAD_API_BEARER_TOKEN
        - name: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION
        - name: METRIC_CLIENT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: METRIC_CLIENT
        - name: OTEL_COLLECTOR_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: OTEL_COLLECTOR_ENDPOINT
        - name: ACTIVITY_MAX_ATTEMPT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: ACTIVITY_MAX_ATTEMPT
        - name: ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS
        - name: ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS
        - name: WORKFLOW_FAILURE_RESTART_DELAY_SECONDS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKFLOW_FAILURE_RESTART_DELAY_SECONDS
        - name: AUTO_DETECT_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AUTO_DETECT_SCHEMA
        - name: SHOULD_RUN_NOTIFY_WORKFLOWS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: SHOULD_RUN_NOTIFY_WORKFLOWS
        - name: MICRONAUT_ENVIRONMENTS
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKERS_MICRONAUT_ENVIRONMENTS
        - name: WORKER_LOGS_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKER_LOGS_STORAGE_TYPE
        - name: WORKER_STATE_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: WORKER_STATE_STORAGE_TYPE
        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        - name: CONTAINER_ORCHESTRATOR_ENABLED
          value: true
        livenessProbe:
          httpGet:
            path: /
            port: heartbeat
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: heartbeat
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: heartbeat
          containerPort: 9000 # for heartbeat server
        - containerPort: 9001 # start temporal worker port pool
        - containerPort: 9002
        - containerPort: 9003
        - containerPort: 9004
        - containerPort: 9005
        - containerPort: 9006
        - containerPort: 9007
        - containerPort: 9008
        - containerPort: 9009
        - containerPort: 9010
        - containerPort: 9011
        - containerPort: 9012
        - containerPort: 9013
        - containerPort: 9014
        - containerPort: 9015
        - containerPort: 9016
        - containerPort: 9017
        - containerPort: 9018
        - containerPort: 9019
        - containerPort: 9020
        - containerPort: 9021
        - containerPort: 9022
        - containerPort: 9023
        - containerPort: 9024
        - containerPort: 9025
        - containerPort: 9026
        - containerPort: 9027
        - containerPort: 9028
        - containerPort: 9029
        - containerPort: 9030 # end temporal worker port pool
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: gcs-log-creds-volume
          mountPath: /secrets/gcs-log-creds
          readOnly: true
      volumes:
      - name: gcs-log-creds-volume
        secret:
          secretName: release-name-gcs-log-creds
---
# Source: airbyte/charts/worker/templates/autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-worker-autoscaler
  namespace: airbyte
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-worker
  minReplicas: 2
  maxReplicas: 4
  metrics:
    - resource:
        name: memory
        target:
          averageUtilization: 70
          type: Utilization
      type: Resource
---
# Source: airbyte/charts/airbyte-api-server/templates/secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/airbyte-bootloader/templates/bootloader-secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/connector-builder-server/templates/secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/cron/templates/cron-secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/server/templates/secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/temporal/templates/secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/webapp/templates/secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/charts/worker/templates/secrets.yaml
# Create secrets only for the local deployment
---
# Source: airbyte/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airbyte-admin
  labels:
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: airbyte
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
---
# Source: airbyte/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-airbyte-secrets
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: airbyte
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  DATABASE_PASSWORD: "airbyte"
  DATABASE_USER: airbyte
  STATE_STORAGE_MINIO_ACCESS_KEY: "minio"
  STATE_STORAGE_MINIO_SECRET_ACCESS_KEY: "minio123"
  WORKLOAD_API_BEARER_TOKEN: ".Values.workload-api.bearerToken"
---
# Source: airbyte/templates/airbyte-yml-configmap.yaml
# The ConfigMap that contains the airbyte.yml content. For this to work helm must be started with
# --set-file airbyteYml=<path_to_configs>/airbyte.yml
# For Airbyte Enterprise our installation script automatically specifies this, for Community
# users will need to specify it, if they want to use the airbyte.yml config file.
# If nothing is specified we'll assume an empty config.
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-airbyte-yml
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: airbyte
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
data:
  fileContents: |-
---
# Source: airbyte/templates/env-configmap.yaml
# default to empty dict if airbyteYml is undefined
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-airbyte-env
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: airbyte
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
data:
  AIRBYTE_VERSION: 0.50.33
  AIRBYTE_EDITION: "community"
  API_URL: /api/v1/
  CONNECTOR_BUILDER_API_URL: "/connector-builder-api"
  CONFIG_ROOT: /configs
  CONFIGS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION: "0.35.15.001"
  DATA_DOCKER_MOUNT: airbyte_data
  DATABASE_DB: db-airbyte
  DATABASE_HOST: airbyte-db-svc
  DATABASE_PORT: "5432"
  DATABASE_URL: "jdbc:postgresql://airbyte-db-svc:5432/db-airbyte"
  DB_DOCKER_MOUNT: airbyte_db
  GCS_LOG_BUCKET: ""
  GOOGLE_APPLICATION_CREDENTIALS: ""
  INTERNAL_API_HOST: release-name-airbyte-server-svc:8001
  WORKLOAD_API_HOST: release-name-workload-api:8007
  KEYCLOAK_INTERNAL_HOST: localhost # just a placeholder so that nginx template is valid - shouldn't be used when edition isn't "pro"
  CONNECTOR_BUILDER_API_HOST: release-name-airbyte-connector-builder-server-svc:80
  AIRBYTE_API_HOST: release-name-airbyte-api-server-svc:80
  JOB_MAIN_CONTAINER_CPU_LIMIT: ""
  JOB_MAIN_CONTAINER_CPU_REQUEST: ""
  JOB_MAIN_CONTAINER_MEMORY_LIMIT: ""
  JOB_MAIN_CONTAINER_MEMORY_REQUEST: ""
  JOBS_DATABASE_MINIMUM_FLYWAY_MIGRATION_VERSION: "0.29.15.001"
  LOCAL_ROOT: /tmp/airbyte_local
  RUN_DATABASE_MIGRATION_ON_STARTUP: "true"
  S3_LOG_BUCKET: "airbyte-dev-logs"
  S3_LOG_BUCKET_REGION: ""
  S3_MINIO_ENDPOINT: "http://airbyte-minio-svc:9000"
  S3_PATH_STYLE_ACCESS: "true"
  STATE_STORAGE_MINIO_BUCKET_NAME: state-storage
  STATE_STORAGE_MINIO_ENDPOINT: "http://airbyte-minio-svc:9000"
  TEMPORAL_HOST: release-name-temporal:7233
  TEMPORAL_WORKER_PORTS: 9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040
  TRACKING_STRATEGY: segment
  WEBAPP_URL: http://release-name-airbyte-webapp-svc:80
  WORKER_ENVIRONMENT: kubernetes
  WORKSPACE_DOCKER_MOUNT: airbyte_workspace
  WORKSPACE_ROOT: /workspace
  METRIC_CLIENT: ""
  OTEL_COLLECTOR_ENDPOINT: ""
  ACTIVITY_MAX_ATTEMPT: ""
  ACTIVITY_INITIAL_DELAY_BETWEEN_ATTEMPTS_SECONDS: ""
  ACTIVITY_MAX_DELAY_BETWEEN_ATTEMPTS_SECONDS: ""
  WORKFLOW_FAILURE_RESTART_DELAY_SECONDS: ""
  AUTO_DETECT_SCHEMA: "true"
  CONTAINER_ORCHESTRATOR_IMAGE: ""
  LAUNCHER_MICRONAUT_ENVIRONMENTS: "control-plane,oss"
  WORKERS_MICRONAUT_ENVIRONMENTS: "control-plane"
  CRON_MICRONAUT_ENVIRONMENTS: "control-plane"
  WORKER_LOGS_STORAGE_TYPE: "MINIO"
  WORKER_STATE_STORAGE_TYPE:  "MINIO"
  SHOULD_RUN_NOTIFY_WORKFLOWS: "true"
  MAX_NOTIFY_WORKERS: "5"
---
# Source: airbyte/templates/airbyte-db.yaml
apiVersion: v1
kind: Service
metadata:
  name: airbyte-db-svc
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: release-name-db
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      protocol: TCP
  selector:
    
    app.kubernetes.io/name: release-name-db
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/templates/minio.yaml
apiVersion: v1
kind: Service
metadata:
  name: airbyte-minio-svc
  labels:
    
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: release-name-minio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
spec:
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    
    app.kubernetes.io/name: release-name-minio
    app.kubernetes.io/instance: release-name
---
# Source: airbyte/charts/airbyte-bootloader/templates/pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-airbyte-bootloader
  labels:
    helm.sh/chart: airbyte-bootloader-0.50.2
    app.kubernetes.io/name: airbyte-bootloader
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.34"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "0"
spec:
  serviceAccountName: airbyte-admin
  restartPolicy: Never
  containers:
    - name: airbyte-bootloader-container
      image: airbyte/bootloader:0.50.34
      imagePullPolicy: "IfNotPresent"
      env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: AIRBYTE_VERSION
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_PORT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_PASSWORD
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: release-name-airbyte-secrets
              key: DATABASE_USER
        - name: RUN_DATABASE_MIGRATION_ON_STARTUP
          valueFrom:
            configMapKeyRef:
              name: release-name-airbyte-env
              key: RUN_DATABASE_MIGRATION_ON_STARTUP
        # Values from secret

        # Values from env

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
      resources:
        limits: {}
        requests: {}
---
# Source: airbyte/templates/minio.yaml
# This pod creates the state-storage bucket in the minio server,
# which the local cloud deployment requires to store its state.
apiVersion: v1
kind: Pod
metadata:
  name: airbyte-minio-create-bucket
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  restartPolicy: OnFailure
  containers:
    - name: minio-mc
      image: minio/mc
      command: ["/bin/sh", "-c",
        "until (/usr/bin/mc config host add myminio $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY) do echo '...waiting...' && sleep 1; done;
          /usr/bin/mc mb --ignore-existing myminio/state-storage;
          /usr/bin/mc policy set public myminio/state-storage;"]
      env:
        - name: MINIO_ACCESS_KEY
          value: minio
        - name: MINIO_SECRET_KEY
          value: minio123
        - name: MINIO_ENDPOINT
          value: http://airbyte-minio-svc:9000
---
# Source: airbyte/templates/tests/test-webapp.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-airbyte-test-connection"
  labels:
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: airbyte
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
  - name: wget
    image: busybox
    command: ['wget']
    args: ['release-name-airbyte-webapp-svc:80']
  restartPolicy: Never
---
# Source: airbyte/templates/airbyte-db.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: airbyte-db
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: release-name-db
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  serviceName: airbyte-db-svc
  selector:
    matchLabels:
      
      app.kubernetes.io/name: release-name-db
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: release-name-db
        app.kubernetes.io/instance: release-name
    spec:
      containers:
        - name: airbyte-db-container
          image: "airbyte/db:0.50.33"
          env:
            - name: POSTGRES_DB
              value: db-airbyte
            - name: POSTGRES_PASSWORD
              value: airbyte
            - name: POSTGRES_USER
              value: airbyte
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: airbyte-volume-db
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: airbyte-volume-db
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 500Mi
---
# Source: airbyte/templates/minio.yaml
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: StatefulSet
metadata:
  # This name uniquely identifies the Deployment
  name: airbyte-minio
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    
    helm.sh/chart: airbyte-0.50.2
    app.kubernetes.io/name: release-name-minio
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.50.33"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      
      app.kubernetes.io/name: release-name-minio
      app.kubernetes.io/instance: release-name
  serviceName: airbyte-minio-svc
  volumeClaimTemplates:
      - metadata:
          name: airbyte-minio-pv-claim
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 500Mi
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        
        app.kubernetes.io/name: release-name-minio
        app.kubernetes.io/instance: release-name
    spec:
      # Refer to the PVC created earlier
      containers:
        - name: airbyte-minio
          # Pulls the default Minio image from Docker Hub
          image: "minio/minio:latest"
          args:
            - server
            - /storage
          env:
            # Minio access key and secret key. This must match the S3_ACCESS_KEY_ID and S3_SECRET_ACCESS_KEY declared in /dev/.env.
            - name: MINIO_ROOT_USER
              value: minio
            - name: MINIO_ROOT_PASSWORD
              value: minio123
          ports:
            - containerPort: 9000
          # Mount the volume into the pod
          volumeMounts:
            - name: airbyte-minio-pv-claim # must match the volume name, above
              mountPath: "/data"
